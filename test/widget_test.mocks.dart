// Mocks generated by Mockito 5.1.0 from annotations
// in calendar_app/test/widget_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:collection' as _i5;
import 'dart:ui' as _i9;

import 'package:device_calendar/src/device_calendar.dart' as _i3;
import 'package:device_calendar/src/models/calendar.dart' as _i6;
import 'package:device_calendar/src/models/event.dart' as _i7;
import 'package:device_calendar/src/models/result.dart' as _i2;
import 'package:device_calendar/src/models/retrieve_events_params.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeResult_0<T> extends _i1.Fake implements _i2.Result<T> {}

/// A class which mocks [DeviceCalendarPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceCalendarPlugin extends _i1.Mock
    implements _i3.DeviceCalendarPlugin {
  MockDeviceCalendarPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<bool>> requestPermissions() => (super.noSuchMethod(
          Invocation.method(#requestPermissions, []),
          returnValue: Future<_i2.Result<bool>>.value(_FakeResult_0<bool>()))
      as _i4.Future<_i2.Result<bool>>);
  @override
  _i4.Future<_i2.Result<bool>> hasPermissions() => (super.noSuchMethod(
          Invocation.method(#hasPermissions, []),
          returnValue: Future<_i2.Result<bool>>.value(_FakeResult_0<bool>()))
      as _i4.Future<_i2.Result<bool>>);
  @override
  _i4.Future<_i2.Result<_i5.UnmodifiableListView<_i6.Calendar>>>
      retrieveCalendars() => (super.noSuchMethod(
              Invocation.method(#retrieveCalendars, []),
              returnValue: Future<
                      _i2.Result<_i5.UnmodifiableListView<_i6.Calendar>>>.value(
                  _FakeResult_0<_i5.UnmodifiableListView<_i6.Calendar>>()))
          as _i4.Future<_i2.Result<_i5.UnmodifiableListView<_i6.Calendar>>>);
  @override
  _i4.Future<_i2.Result<_i5.UnmodifiableListView<_i7.Event>>> retrieveEvents(
          String? calendarId, _i8.RetrieveEventsParams? retrieveEventsParams) =>
      (super.noSuchMethod(
              Invocation.method(
                  #retrieveEvents, [calendarId, retrieveEventsParams]),
              returnValue:
                  Future<_i2.Result<_i5.UnmodifiableListView<_i7.Event>>>.value(
                      _FakeResult_0<_i5.UnmodifiableListView<_i7.Event>>()))
          as _i4.Future<_i2.Result<_i5.UnmodifiableListView<_i7.Event>>>);
  @override
  _i4.Future<_i2.Result<bool>> deleteEvent(
          String? calendarId, String? eventId) =>
      (super.noSuchMethod(
              Invocation.method(#deleteEvent, [calendarId, eventId]),
              returnValue:
                  Future<_i2.Result<bool>>.value(_FakeResult_0<bool>()))
          as _i4.Future<_i2.Result<bool>>);
  @override
  _i4.Future<_i2.Result<bool>> deleteEventInstance(
          String? calendarId,
          String? eventId,
          int? startDate,
          int? endDate,
          bool? deleteFollowingInstances) =>
      (super.noSuchMethod(
              Invocation.method(#deleteEventInstance, [
                calendarId,
                eventId,
                startDate,
                endDate,
                deleteFollowingInstances
              ]),
              returnValue:
                  Future<_i2.Result<bool>>.value(_FakeResult_0<bool>()))
          as _i4.Future<_i2.Result<bool>>);
  @override
  _i4.Future<_i2.Result<String>?> createOrUpdateEvent(_i7.Event? event) =>
      (super.noSuchMethod(Invocation.method(#createOrUpdateEvent, [event]),
              returnValue: Future<_i2.Result<String>?>.value())
          as _i4.Future<_i2.Result<String>?>);
  @override
  _i4.Future<_i2.Result<String>> createCalendar(String? calendarName,
          {_i9.Color? calendarColor, String? localAccountName}) =>
      (super.noSuchMethod(
              Invocation.method(#createCalendar, [
                calendarName
              ], {
                #calendarColor: calendarColor,
                #localAccountName: localAccountName
              }),
              returnValue:
                  Future<_i2.Result<String>>.value(_FakeResult_0<String>()))
          as _i4.Future<_i2.Result<String>>);
  @override
  _i4.Future<_i2.Result<bool>> deleteCalendar(String? calendarId) =>
      (super.noSuchMethod(Invocation.method(#deleteCalendar, [calendarId]),
              returnValue:
                  Future<_i2.Result<bool>>.value(_FakeResult_0<bool>()))
          as _i4.Future<_i2.Result<bool>>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i10.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(Invocation.method(#getKeys, []),
      returnValue: <String>{}) as Set<String>);
  @override
  Object? get(String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key])) as Object?);
  @override
  bool? getBool(String? key) =>
      (super.noSuchMethod(Invocation.method(#getBool, [key])) as bool?);
  @override
  int? getInt(String? key) =>
      (super.noSuchMethod(Invocation.method(#getInt, [key])) as int?);
  @override
  double? getDouble(String? key) =>
      (super.noSuchMethod(Invocation.method(#getDouble, [key])) as double?);
  @override
  String? getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key])) as String?);
  @override
  bool containsKey(String? key) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [key]),
          returnValue: false) as bool);
  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(#getStringList, [key]))
          as List<String>?);
  @override
  _i4.Future<bool> setBool(String? key, bool? value) =>
      (super.noSuchMethod(Invocation.method(#setBool, [key, value]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> setInt(String? key, int? value) =>
      (super.noSuchMethod(Invocation.method(#setInt, [key, value]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> setDouble(String? key, double? value) =>
      (super.noSuchMethod(Invocation.method(#setDouble, [key, value]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> setString(String? key, String? value) =>
      (super.noSuchMethod(Invocation.method(#setString, [key, value]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> setStringList(String? key, List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setStringList, [key, value]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> remove(String? key) =>
      (super.noSuchMethod(Invocation.method(#remove, [key]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> commit() =>
      (super.noSuchMethod(Invocation.method(#commit, []),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<void> reload() =>
      (super.noSuchMethod(Invocation.method(#reload, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}
